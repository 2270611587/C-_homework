2.1[解] C++ 语言的主要特点表现在两个方面，一是全面兼容C.并对C的功能作了不少扩充，二是增加了面向对象的机制，具体表现为:

(1)C++是C的超集,C++保持与C的兼容，这就使许多C代码不经修改就可以为C++所用，用C编写的众多的库丽数和实用软件可以用于C++中。

(2) C++是一个更好的C,它保持了C的简洁、高效和接近汇编语言等特点,并对C的功能作了不少扩充。用C++编写的程序比C更安全,可读性更好，代码结构更为合理，C++的编译系统能够检查出更多的类型错误。

(3)用C++编写的程序质量高，从开发时间、费用到形成的软件的可重用性、可扩充性、可维护性和可靠性等方面有了很大的提高，使得大中型的程序开发变得更加容易。

(4)增加了面向对象的机制，几乎支持所有的面问对象程序设计特征,体现了近20年来在程序设计和软件开发领域出现的新思想和新技术,这主要包括:

①抽象数据类型;

②封装与信息隐藏;

③以继承方式实现程序的重用;

④以函数重载、运算符重载和虚函数来实现多态性;

⑤以模板来实现类型的参数化。

C++语言最有意义的方面是支持面向对象的特征，然而，由于C++与C保持兼容，使得C++不是一个纯正的面向对象的语言,C++既可用于面向过程的结构化程序设计，也可用于面向对象的程序设计。
2.4
解:不可能通过编译的原因是:在程序中，当一个函数的定义在后，而对它的调用在

前时，必须将该函数的原型写在调用语句之前，而在本程序中缺少函数原型语句。在语句“using namespace std:"后加上函数原型语句"int sum (int a,int b);"就可通过编译。
2.5
(1)这两个函数原型是等价的，因为丽数原型中的参数名可以缺省。

(2)这两个雨数的第1行是不等价的，因为这个函数的第1行中必须包含参数名。
2.10
B
2.11
A
2.12
C
2.13
B
2.15
C
2.18
101
2.19
10 10
2.21
解 例如，以下程序显示出#define的不安全性:

#include<iostream>
using namespace std;
#define A 2+4
#define B A*3
int main()
{ cout<<B<<endl;
  return 0;
}

上面程序的运行结果是14，而不是18.但很容易被认为是18.下面程序使用const替代了#define，就可以消除#define的不安全性;
#include <iostream>
using namespace std;
int const A=2+4;
int const B=A*3;
int main()
{
cout<<B<<end1;
return 0;
}

使用const以后,运行结果是18.
